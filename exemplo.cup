import java_cup.runtime.*;

/*
=> init with {: ... :}
   Código que será inserido dentro do construtor da classe 
   do analisador sintático; por isso, executado no início. 
*/
init with {: 
  System.out.println("Resultado:");
:}

/* 
=> parser code {: ... :}:
   Permite incluir um método main() diretamente dentro da 
   classe do analisador sintático, dispensando a criação de 
   uma classe principal (Main) com o método main().

   O próprio analisador sintático será responsável por iniciar 
   a execução.
*/
parser code {:
  //Atributo da classe do analisador sintático:
  private String nomeDoArquivo;

  // Novo construtor personalizado do analisador sintático:
  public MeuParser(java_cup.runtime.Scanner meuScanner, String nomeDoArquivo) {
    super(meuScanner);
    this.nomeDoArquivo = nomeDoArquivo;
  }

  public static void main(String[] args) throws Exception {
    Compilador compilador = new Compilador();
    compilador.compilar(args[0]);
  }
:}

/*
=> action code {: ... :}
   Área para funções auxiliares, útil se quiser separar lógica.
*/
action code {:
  private Integer somar(Integer a, Integer b) {
    return a.intValue() + b.intValue();
  }

  private Integer subtrair(Integer a, Integer b) {
    return a.intValue() - b.intValue();
  }

  private Integer inverterSinal(Integer a) {
    return -a;
  }

  private Integer multiplicar(Integer a, Integer b){
    return a.intValue() * b.intValue();
  }
  
  private Integer dividir(Integer a, Integer b){
    return a.intValue() / b.intValue();
  }

private Integer resto(Integer a, Integer b) {
    return a.intValue() % b.intValue();
}

  private Integer elevar(Integer a, Integer b){
    return (int) Math.pow(a.intValue(), b.intValue());
  }
:}

terminal Integer INTEIRO;
terminal String STRING;
terminal MAIS, MENOS, MULTIPLICACAO, DIVISAO, MODULO, POTENCIACAO, MENOSUNARIO, PTVIRG, PARENTESQ, PARENTDIR;

non terminal inicio;
non terminal Integer expr;
non terminal String valor;

valor ::= STRING:s {: RESULT = s; :};

precedence left MAIS, MENOS;
precedence right DIVISAO, MULTIPLICACAO, MODULO, POTENCIACAO, MENOSUNARIO;

start with inicio;

inicio ::= expr:e PTVIRG {: System.out.println(e + " (Arquivo: " + nomeDoArquivo + ")"); :}
         ;

expr ::= expr:a MAIS expr:b             {: RESULT = somar(a, b); :}
       | expr:a MENOS expr:b            {: RESULT = subtrair(a, b); :}
       | expr:a MULTIPLICACAO expr:b    {: RESULT = multiplicar(a, b); :}
       | expr:a DIVISAO expr:b          {: RESULT = dividir(a,b); :}
       | expr:a MODULO expr:b           {: RESULT = resto(a,b); :}
       | expr:a POTENCIACAO expr:b      {: RESULT = elevar(a,b); :}
       | MENOS expr:a                   {: RESULT = inverterSinal(a); :} %prec MENOSUNARIO       
       | PARENTESQ expr:a PARENTDIR     {: RESULT = a.intValue(); :}
       | INTEIRO:a                      {: RESULT = a.intValue(); :}
       ;

/*
Usar %prec:
  É importante quando um mesmo token tem dois significados 
  diferentes (como o - unário e binário).
  Evita conflitos de precedência.
  Garante a construção correta da árvore sintática e a avaliação da expressão.

=> Usar %prec MENOSUNARIO para informar:
   "Essa regra tem a precedência do token MENOSUNARIO, 
    que foi declarado separadamente na seção de precedência".
*/